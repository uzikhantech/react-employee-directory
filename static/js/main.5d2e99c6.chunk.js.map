{"version":3,"sources":["components/Wrapper/index.js","components/Jumbotron/index.js","components/SearchFilter/index.js","components/EmployeeTable/index.js","utils/API.js","components/Container/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","console","log","children","className","paragraphContent","Jumbotron","SearchFilter","onChange","handleInputChange","value","search","name","type","placeholder","id","EmployeeTable","rows","results","filter","item","first","startsWith","searchTerm","map","element","key","src","picture","medium","email","phone","Moment","dob","date","format","scope","style","cursor","onClick","sortByName","axios","get","Container","state","sorted","event","setState","target","sortbyName","copyArray","sort","a","b","API","then","response","data","catch","err","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.5d2e99c6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n//wraps arpund the entire body\r\nfunction Wrapper(props) {\r\n    console.log(props.children)\r\n  return <div className=\"wrapper\">\r\n          <h1>{props.paragraphContent}</h1>\r\n          {props.children}\r\n          </div>;\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n//wraps arpund the entire body\r\nfunction Jumbotron(props) {\r\n    console.log(props.children)\r\n  return (\r\n  <header className=\"jumbotron\">\r\n    <span className=\"badge \">  <h1 className=\"display-2\">Employee Directory</h1>\r\n      <p className=\"lead\">A simple employee directory using react</p>\r\n    </span>\r\n  </header>\r\n  );\r\n}\r\n\r\nexport default Jumbotron;","import React from \"react\";\r\n\r\nfunction SearchFilter(props) {\r\n  return (\r\n    <form>\r\n      <div className=\"form-group\">\r\n \r\n        <input\r\n          onChange={props.handleInputChange}\r\n          value={props.search}\r\n          name=\"search\"\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"Filter by Name...\"\r\n          id=\"search\"\r\n        />\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default SearchFilter;\r\n","import React from \"react\";\r\nimport Moment from 'moment';\r\n\r\nfunction EmployeeTable(props) {\r\n\r\n    //filter employees by name types in the search box\r\n    var employees =  props.results.filter((item) => {\r\n        return item.name.first.startsWith(props.searchTerm);\r\n    });\r\n    \r\n    //create the rows of employees\r\n    const rows = employees.map((element) => \r\n                <tr key ={element.id.value}>\r\n                     <td className=\"align-middle\"><img src={element.picture.medium}  className=\"img-responsive\"/></td>\r\n                     <td>{element.name.first}</td>\r\n                     <td>{element.email}</td>\r\n                     <td>{element.phone}</td>\r\n                     <td>{Moment(element.dob.date).format('MM-DD-YYYY')}</td>\r\n                 </tr>\r\n    );\r\n        \r\n\r\n  return (\r\n    <div className = \"row mt-5\">\r\n    <table className=\"table table-striped\">\r\n        <thead className=\"thead-dark\">\r\n            <tr>\r\n                <th scope=\"col\">Picutre</th>\r\n                <th scope=\"col\"style={{cursor: 'pointer'}} onClick={props.sortByName}>Name</th>\r\n                <th scope=\"col\">Email</th>\r\n                <th scope=\"col\">Phone</th>\r\n                <th scope=\"col\">D.O.B</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {rows}\r\n        </tbody>\r\n    </table>\r\n    </div>\r\n   \r\n  );\r\n}\r\n\r\nexport default EmployeeTable;","import axios from \"axios\";\r\n\r\nexport default{ \r\n    getEmployees:function(){    \r\n\r\n        return axios.get(\"https://randomuser.me/api/?results=30&nat=us\");\r\n    }\r\n};","import React, { Component } from \"react\";\r\nimport SearchFilter from \"../SearchFilter\";\r\nimport EmployeeTable from \"../EmployeeTable\";\r\nimport API from \"../../utils/API\";\r\n\r\nclass Container extends Component {\r\n    state = {\r\n      search: \"\",\r\n      results: [],\r\n      sorted:\"\"\r\n    };\r\n\r\n    //when the component first loads search for employees using the API\r\n    componentDidMount() {\r\n        API.getEmployees()\r\n        .then(response => {\r\n            this.setState({results:response.data.results})\r\n           \r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n\r\n    //handle the input change of the search box\r\n    handleInputChange = (event) => {\r\n      this.setState({ search: event.target.value });\r\n    };\r\n\r\n    //sort the array of employee objects by name\r\n    sortbyName = () =>{\r\n      const copyArray = [...this.state.results]\r\n      if (this.state.sorted === \"\" || this.state.sorted === 'desc') {\r\n        copyArray.sort((a, b) => (a.name.first > b.name.first) ? 1 : -1)\r\n        this.setState({results : copyArray})\r\n        this.setState({sorted:'asc'});\r\n      } else {\r\n        copyArray.sort((a, b) => (a.name.first < b.name.first) ? 1 : -1)\r\n        this.setState({results : copyArray})\r\n        this.setState({sorted:'desc'});\r\n      }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n          <div className= \"container\">\r\n            <SearchFilter\r\n                search={this.state.search}\r\n                handleInputChange={this.handleInputChange}\r\n            />\r\n            <EmployeeTable\r\n                results={this.state.results} \r\n                searchTerm={this.state.search}\r\n                sortByName={this.sortbyName} \r\n            />\r\n          </div>\r\n        );\r\n      }\r\n\r\n\r\n\r\n}\r\n\r\nexport default Container;","import React from 'react';\nimport Wrapper from \"./components/Wrapper\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Container from \"./components/Container\";\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <Wrapper>\n        <Jumbotron/>\n        <Container/>\n    </Wrapper>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}